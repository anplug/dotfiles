#!/bin/ruby

# Automatically turn off internal screen for such resolution
HUGE_EXTERNAL_RESOLUTION = '3440x1440'

INTERNAL_OUTPUT = 'eDP1'
POSSIBLE_OUTPUTS = %w(eDP1 VIRTUAL1 DP1 DP2 HDMI1 HDMI2)

class Connection
  def initialize
    @connections = %x(xrandr --current).split("\n")
    @external_connected = false
    @interface = interface
  end

  def interface
    return @interface if @interface

    @interface_line_number = @connections.find_index do |line|
      matched = /(.*) connected/.match(line)
      next unless matched

      interface = matched = matched[1]
      if interface == INTERNAL_OUTPUT
        next
      else
        @external_connected = true
        @interface = interface
      end
    end

    @interface
  end

  def external_connected?
    @external_connected
  end

  def resolution
    return unless external_connected?
    return @resolution if @resolution

    match = /(\d*x\d*)/.match(highest_setting_string)
    raise 'Wrong resolution setting!' unless match
    @resolution = match[1]
  end

  def fps
    return unless external_connected?
    return @fps if @fps

    @fps = highest_setting_string.scan(/(\d*\.\d*)/).flatten.map(&:to_f).max
  end

  def width
    resolution.split('x')[0].to_i
  end

  def height
    resolution.split('x')[1].to_i
  end

  private

  def highest_setting_string
    @highest_setting_string ||= @connections[@interface_line_number + 1]
  end
end

class Resolver
  INTERNAL_REASONS = [
    :force_internal,
    :auto_internal
  ]

  EXTERNAL_REASONS = [
    :force_external,
    :auto_external
  ]

  DUAL_REASONS = [:auto]

  INTERNAL_STRING = "--output #{INTERNAL_OUTPUT} --mode 1920x1080 --rotate normal"

  def resolve(reason, position: nil, low_profile: nil)
    @reason = reason
    @position = position || 'top'
    @low_profile = low_profile

    if INTERNAL_REASONS.include?(reason)
      internal!
    elsif EXTERNAL_REASONS.include?(reason)
      external!
    elsif DUAL_REASONS.include?(reason)
      dual!
    end
  end

  private

  def internal!
    if @reason == :force_internal
      puts 'Internal display selected manually, activating...'
    else
      puts 'No external displays connected, activating internal display...'
    end

    "xrandr #{INTERNAL_STRING} --primary --pos 0x0 #{off_strings(without: [INTERNAL_OUTPUT])}"
  end

  def external!
    if @reason == :force_external
      puts 'External display selected manually, activating...'
    else
      puts 'Big screen detected, activating external display only...'
    end

    puts "Resolution: #{CONN.resolution} : #{CONN.fps}hz"

    %x(xrandr --output #{CONN.interface} --primary --mode #{CONN.resolution} \
      --rate #{CONN.fps} --pos 0x0 --rotate normal #{off_strings(without: [CONN.interface])})
  end

  def dual!
    puts 'Activating dualhead mode...'

    puts "Resolution: #{CONN.resolution} : #{CONN.fps}hz"
    puts "Internal pos #{internal_position}"
    puts "External pos #{external_position}"

    %x(xrandr #{INTERNAL_STRING} --pos #{internal_position} \
      --output #{CONN.interface} --primary --mode #{CONN.resolution} \
      --rate #{CONN.fps} --pos #{external_position} --rotate normal \
      #{off_strings(without: [INTERNAL_OUTPUT, CONN.interface])})
  end

  def internal_position
    shift = @low_profile ? CONN.height / 4 : CONN.height / 2
    if @position == 'top'
      "#{CONN.width / 4}x#{CONN.height}"
    elsif @position == 'left'
      "#{CONN.width}x#{shift}"
    else # right
      "0x#{shift}"
    end
  end

  def external_position
    if @position == 'top'
      '0x0'
    elsif @position == 'left'
      '0x0'
    else # right
      '1920x0'
    end
  end

  def off_strings(without: [])
    POSSIBLE_OUTPUTS.reject { |out| without.include?(out) }.map { |out|
      "--output #{out} --off"
    }.join(' ')
  end
end

def print_help
  puts "Usage:\n\tscreen [internal|external|top|right|left] [low]"
end

CONN = Connection.new
RESOLVER = Resolver.new

if ['help', '-h', '\h'].include?(ARGV[0])
  print_help
elsif ARGV[0] == 'internal'
  RESOLVER.resolve(:force_internal)
elsif ARGV[0] == 'external'
  RESOLVER.resolve(:force_external)
elsif !CONN.external_connected?
  RESOLVER.resolve(:auto_internal)
elsif CONN.resolution == HUGE_EXTERNAL_RESOLUTION
  RESOLVER.resolve(:auto_external)
else
  position = ARGV[0] if ['left', 'right', 'top'].include?(ARGV[0])
  low_profile = true if ARGV[1] == 'low' && !position.nil?
  RESOLVER.resolve(:auto, position: position, low_profile: low_profile)
end
